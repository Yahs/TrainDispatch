import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;

public class StatMapSideTest {
	
	public static void main(String[] args) {
		
		StationMap map = new StationMap(10);
		List<Edge> connections = new ArrayList<Edge>();
		map.callStation(0).setPos(1, 1);
		map.callStation(1).setPos(1, 4);
		map.callStation(2).setPos(4, 1);
		map.callStation(3).setPos(5, 5);
		map.callStation(4).setPos(6, 3);
		map.callStation(5).setPos(2, 7);
		map.callStation(6).setPos(8, 6);
		map.callStation(7).setPos(3, 9);
		map.callStation(8).setPos(9, 1);
		map.callStation(9).setPos(7, 9);
		
		Random r = new Random();
		int[] st = new int [12];
int[] st1 = new int[12];

for (int i = 0; i < 12; i++) {
	st1[i] = r.nextInt(9) + 1;
	st[i] = r.nextInt(9) + 1;
	if (st[i] == st1[i]) {
		st1[i] = r.nextInt(9) + 1;
	}
}
for (int i = 0; i < 12; i++) {
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		connections.add(map.callStation(st).getEdge(map.callStation(st1)));
		
		printList(connections);
}
	}
	
	public static void printList(List<Edge> cons) {
	    System.out.print("Start Station\t\tEnd Station\t\tCost\n");
		for (int i = 0; i < cons.size(); i++) {
	    	System.out.println(cons.get(i));
	    }
	  }

}
